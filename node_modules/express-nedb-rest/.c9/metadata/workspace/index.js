{"changed":true,"filter":false,"title":"index.js","tooltip":"/index.js","value":"var express = require('express');\nvar bodyParser = require(\"body-parser\");\nvar nedb = require('nedb');\nvar filter = require('./filter');\nvar order = require('./order');\n\nfunction expressNedbRest(cfg) {\n    \n    var router = express.Router();\n\n    // initialize configuration object\n    router.cfg = (typeof(cfg) == 'object') ? cfg : {};\n    router.cfg.collections = [];  //no collections yet\n    if (typeof(router.cfg.convertToDate) != 'boolean') {\n        router.cfg.convertToDate = true;\n    }\n\n    // define reviver function to parse date strings, if option convertToDate==true\n    var reviverFunc = null;\n    if (router.cfg.convertToDate) {\n        reviverFunc = function(key, value) {\n            // convert date string (ISO 8601) to date object\n            // i.e. \"2017-04-07T18:00:00.000Z\"\n            if(typeof(value)=='string' && \n               /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|(\\+|-)\\d{2}:\\d{2})$/.test(value)) {\n              return new Date(value);\n            }\n            else {\n                return value;\n            }    \n        };\n    }\n    \n    // parse body of request\n    router.use(bodyParser.json({\"reviver\":reviverFunc}));\n\n    // add configuration to each request\n    router.use(function (req, res, next) {\n        req.cfg = router.cfg;\n        next();\n    });\n\n    // find datastore of collection and add it to request object\n    router.param('collection', function collectionParam(req, res, next, collection) {\n\n        // call validator function, if configured\n        if (req.cfg.validator) {\n            req.cfg.validator(req, res, next);\n        }\n\n        // add collection information to request object\n        req.collection = collection;\n        req.nedb = req.cfg.collections[collection];\n\n        if (!req.nedb) {\n            next({ status: 404, // Not found\n                   message: \"unknown collection \" + req.collection }) ;\n        }\n        else {\n            // parse filter\n            try {\n                req.$filter = filter(req.query.$filter);\n                next();\n            }\n            catch (e) {\n                // parser error\n                next({ status: 400, // Bad Request\n                       message: \"unvalid $filter \" + e.message });\n            }\n        }\n    });\n\n    // add object id from uri to request\n    router.param('id', function (req, res, next, id) {\n        req.id = id;\n        next();\n    });\n\n    // register methods for GET, POST, ...\n    addRestMethods(router);\n\n    // at last send json result or error\n    router.use(function(req, res, next){\n        if(res.locals.count) {\n            res.append('X-Total-Count', res.locals.count);\n        }\n        if (res.locals.json) {\n            res.json(res.locals.json);\n        }\n        next();\n    });\n\n    // error handling\n    router.use(function(err, req, res, next){\n        if ( typeof(err) ==='object') {\n            res.status(err.status || 400);\n            res.send(err.message || 'unknown error');\n        }\n        else  {\n            res.status(400);\n            res.send(err.toString());\n        }\n    });\n\n    /**\n     * add a NeDB datastore to REST collections\n     * @param {string} collection's name, wich is used for publication in REST calls\n     * @param {Datastore) NeDB Datastore object\n     * @public\n     */\n    router.addDatastore = function(collection, store) {\n        this.cfg.collections[collection] = store;\n    };\n\n    /**\n     * add a callback function, which will be called before each NeDB database call.\n     * @param {function) callback function with expressJS signature (req, res, next)\n     * @public\n     */\n    router.setValidator = function(f) {\n        if (typeof(f) == \"function\") {\n            this.cfg.validator = f;\n        }\n        else {\n            this.cfg.validator = null;\n        }\n    };\n\n    // return router\n    return router;\n};\n\n\nfunction fullUrl(req) {\n    return req.protocol + '://' + req.get('host') + req.originalUrl;\n}\n\nfunction addRestMethods(router) {\n\n    //--------------------------------------------------------------------------\n    router.get('/', function (req, res, next) {\n        // return an array with all collection's names\n        res.locals.json = [];\n        for(var name in req.cfg.collections) {\n            res.locals.json.push({\n                \"name\":  name,\n                \"link\":  fullUrl(req) + name\n            });\n        }\n        res.locals.count = res.locals.json.length;\n        next();\n    });\n\n    //--------------------------------------------------------------------------\n    router.get('/:collection', function (req, res, next) {\n\n        if (typeof(req.query.$count) == \"undefined\") {\n            if (typeof(req.query.$single) == 'undefined') {\n                // normal query\n                var query = req.nedb.find(req.$filter);\n                // parse orderby\n                if (req.query.$orderby) {\n                try {\n                        var $order = order(req.query.$orderby);\n                        if ($order) query.sort($order);\n                    }\n                    catch (e) {\n                        // parser error\n                        next({ status: 400, // Bad Request\n                               message: \"unvalid $orderby \" + e.message });\n                    }\n                }\n                if (!isNaN(req.query.$skip)) query.skip(parseInt(req.query.$skip));\n                if (!isNaN(req.query.$limit)) query.limit(parseInt(req.query.$limit));\n                query.exec(function(err, docs) {\n                    if (err) {\n                        return next(err);\n                    }\n                    res.locals.count = docs.length;\n                    res.locals.json = docs;\n                    next();\n                });        }\n            else {\n                // find single document\n                query = req.nedb.findOne(req.$filter, function(err, doc) {\n                    if (err) {\n                        return next(err);\n                    }\n                    if (doc) {\n                        res.locals.count = 1;\n                        res.locals.json = doc;\n                        next();\n                    }\n                    else {\n                        next({ status: 404, // Not found\n                               message: \"document not found\" });\n                    }\n                });\n            }\n    \n        }\n        else {\n            // count of documents requested\n            req.nedb.count(req.$filter, function(err, count) {\n                if (err) {\n                    return next(err);\n                }\n                res.locals.count = count;\n                res.status(200).send(count.toString());\n            });\n        }\n    });\n\n    //--------------------------------------------------------------------------\n    router.get('/:collection/:id', function (req, res, next) {\n        req.nedb.findOne({ _id: req.id }, function (err, doc) {\n            if (err) {\n                return next(err);\n            }\n            if (!doc) {\n                return next({status:404, message:\"document \"+req.collection+\" _id=\"+req.id+\" not found\"});\n            }\n            res.locals.json = doc;\n            next();\n        });\n    });\n\n\n    //--------------------------------------------------------------------------\n    router.post('/:collection', function (req, res, next) {\n        if (!req.body || typeof(req.body) != 'object') {\n            return next({ status: 400, message: 'No Request Body' }); // Bad Request\n        }\n        req.nedb.insert(req.body, function (err, doc) {\n            if (err) {\n                return next(err);\n            }\n            res.append('Location', fullUrl(req) + '/' + doc._id);\n            res.status(201); // Created\n            res.locals.json = doc;\n            next();\n        });\n    });\n\n\n    //--------------------------------------------------------------------------\n    router.delete('/:collection/:id', function (req, res, next) {\n        req.nedb.remove({ _id: req.id}, { multi: false }, function (err, count) {\n            if (err) {\n                return next(err);\n            }\n            if (count != 1) {\n                return next({status:404, message:\"document \"+req.collection+\" _id=\"+req.id+\" not found\"});\n            }\n            else {\n                res.locals.count = count;\n                res.status(204).send(\"deleted entries: \"+count);\n            }\n        });\n    });\n\n\n    //--------------------------------------------------------------------------\n    router.delete('/:collection', function (req, res, next) {\n        if (!req.$filter || Object.keys(req.$filter).length == 0) {\n            return next({ status: 405, message: '$filter ist missing' });\n        }\n        req.nedb.remove(req.$filter, { multi: true }, function (err, count) {\n            if (err) {\n                return next(err);\n            }\n            if (count == 0) {\n                return next({status:404, message:\"no document found to delete\"});\n            }\n            res.locals.count = count;\n            res.status(204).send(\"deleted entries: \"+count);\n        });\n    });\n\n    //--------------------------------------------------------------------------\n    router.put('/:collection/:id', function (req, res, next) {\n        if (!req.body || typeof(req.body) != 'object') {\n            return next({ status: 400, message: 'No Request Body' }); // Bad Request\n        }\n        req.nedb.update({_id:req.id}, req.body, {multi:false}, function (err, count) {\n            if (err) {\n                return next(err);\n            }\n            if (count != 1) {\n                return next({status:404, message:\"document \"+req.collection+\" _id=\"+req.id+\" not found\"});\n            }\n            res.locals.count = count;\n            res.status(204).send(\"updated entries: \"+count);\n        });\n    });\n\n    //--------------------------------------------------------------------------\n    router.put('/:collection', function (req, res, next) {\n        if (!req.body || typeof(req.body) != 'object') {\n            return next({ status: 400, message: 'No Request Body' }); // Bad Request\n        }\n        req.nedb.update(req.$filter, req.body, {multi:true}, function (err, count, docs) {\n            if (err) {\n                return next(err);\n            }\n            if (count == 0) {\n                return next({status:404, message:\"no document found to update\"});\n            }\n            res.locals.count = count;\n            res.status(204).send(\"updated entries: \"+count);\n        });\n    });\n\n    //--------------------------------------------------------------------------\n    router.patch('/:collection', function (req, res, next) {\n        res.status(405).send(); // Method Not Allowed\n    });\n\n    //--------------------------------------------------------------------------\n    router.delete('/:collection', function (req, res, next) {\n        res.status(405).send(); // Method Not Allowed\n    });\n\n    //--------------------------------------------------------------------------\n    router.post('/:collection/:id', function (req, res, next) {\n        res.status(405).send(); // Method Not Allowed\n    });\n\n}\n\n\nmodule.exports = expressNedbRest;\n","undoManager":{"mark":87,"position":97,"stack":[[{"start":{"row":188,"column":20},"end":{"row":188,"column":21},"action":"insert","lines":["f"],"id":2}],[{"start":{"row":188,"column":21},"end":{"row":188,"column":22},"action":"insert","lines":[" "],"id":3}],[{"start":{"row":188,"column":22},"end":{"row":188,"column":23},"action":"insert","lines":["("],"id":4}],[{"start":{"row":188,"column":23},"end":{"row":188,"column":24},"action":"insert","lines":["!"],"id":5}],[{"start":{"row":188,"column":23},"end":{"row":188,"column":24},"action":"remove","lines":["!"],"id":6}],[{"start":{"row":188,"column":22},"end":{"row":188,"column":23},"action":"remove","lines":["("],"id":7}],[{"start":{"row":188,"column":21},"end":{"row":188,"column":22},"action":"remove","lines":[" "],"id":8}],[{"start":{"row":188,"column":20},"end":{"row":188,"column":21},"action":"remove","lines":["f"],"id":9}],[{"start":{"row":188,"column":20},"end":{"row":188,"column":21},"action":"insert","lines":["i"],"id":10}],[{"start":{"row":188,"column":21},"end":{"row":188,"column":22},"action":"insert","lines":["f"],"id":11}],[{"start":{"row":188,"column":22},"end":{"row":188,"column":23},"action":"insert","lines":[" "],"id":12}],[{"start":{"row":188,"column":23},"end":{"row":188,"column":24},"action":"insert","lines":["("],"id":13}],[{"start":{"row":188,"column":23},"end":{"row":188,"column":24},"action":"remove","lines":["("],"id":14}],[{"start":{"row":188,"column":23},"end":{"row":188,"column":24},"action":"insert","lines":["("],"id":15}],[{"start":{"row":188,"column":24},"end":{"row":188,"column":25},"action":"insert","lines":["d"],"id":16}],[{"start":{"row":188,"column":25},"end":{"row":188,"column":26},"action":"insert","lines":["o"],"id":17}],[{"start":{"row":188,"column":26},"end":{"row":188,"column":27},"action":"insert","lines":["c"],"id":18}],[{"start":{"row":188,"column":27},"end":{"row":188,"column":28},"action":"insert","lines":[")"],"id":19}],[{"start":{"row":188,"column":28},"end":{"row":188,"column":29},"action":"insert","lines":[" "],"id":20}],[{"start":{"row":188,"column":29},"end":{"row":188,"column":30},"action":"insert","lines":["{"],"id":21}],[{"start":{"row":188,"column":30},"end":{"row":189,"column":0},"action":"insert","lines":["",""],"id":22},{"start":{"row":189,"column":0},"end":{"row":189,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":190,"column":20},"end":{"row":190,"column":24},"action":"insert","lines":["    "],"id":23}],[{"start":{"row":191,"column":21},"end":{"row":191,"column":24},"action":"insert","lines":["   "],"id":24}],[{"start":{"row":191,"column":23},"end":{"row":191,"column":24},"action":"remove","lines":[" "],"id":25}],[{"start":{"row":191,"column":22},"end":{"row":191,"column":23},"action":"remove","lines":[" "],"id":26}],[{"start":{"row":191,"column":21},"end":{"row":191,"column":22},"action":"remove","lines":[" "],"id":27}],[{"start":{"row":191,"column":20},"end":{"row":191,"column":24},"action":"insert","lines":["    "],"id":28}],[{"start":{"row":191,"column":31},"end":{"row":192,"column":0},"action":"insert","lines":["",""],"id":29},{"start":{"row":192,"column":0},"end":{"row":192,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":192,"column":24},"end":{"row":192,"column":25},"action":"insert","lines":["}"],"id":30},{"start":{"row":192,"column":0},"end":{"row":192,"column":24},"action":"remove","lines":["                        "]},{"start":{"row":192,"column":0},"end":{"row":192,"column":20},"action":"insert","lines":["                    "]}],[{"start":{"row":192,"column":21},"end":{"row":192,"column":22},"action":"insert","lines":[" "],"id":31}],[{"start":{"row":192,"column":21},"end":{"row":192,"column":22},"action":"remove","lines":[" "],"id":32}],[{"start":{"row":192,"column":21},"end":{"row":192,"column":22},"action":"insert","lines":["#"],"id":33}],[{"start":{"row":192,"column":21},"end":{"row":192,"column":22},"action":"remove","lines":["#"],"id":34}],[{"start":{"row":192,"column":21},"end":{"row":193,"column":0},"action":"insert","lines":["",""],"id":35},{"start":{"row":193,"column":0},"end":{"row":193,"column":20},"action":"insert","lines":["                    "]}],[{"start":{"row":193,"column":20},"end":{"row":193,"column":21},"action":"insert","lines":["e"],"id":36}],[{"start":{"row":193,"column":21},"end":{"row":193,"column":22},"action":"insert","lines":["s"],"id":37}],[{"start":{"row":193,"column":22},"end":{"row":193,"column":23},"action":"insert","lines":["l"],"id":38}],[{"start":{"row":193,"column":23},"end":{"row":193,"column":24},"action":"insert","lines":["e"],"id":39}],[{"start":{"row":193,"column":23},"end":{"row":193,"column":24},"action":"remove","lines":["e"],"id":40}],[{"start":{"row":193,"column":22},"end":{"row":193,"column":23},"action":"remove","lines":["l"],"id":41}],[{"start":{"row":193,"column":21},"end":{"row":193,"column":22},"action":"remove","lines":["s"],"id":42}],[{"start":{"row":193,"column":21},"end":{"row":193,"column":22},"action":"insert","lines":["ö"],"id":43}],[{"start":{"row":193,"column":21},"end":{"row":193,"column":22},"action":"remove","lines":["ö"],"id":44}],[{"start":{"row":193,"column":21},"end":{"row":193,"column":22},"action":"insert","lines":["l"],"id":45}],[{"start":{"row":193,"column":22},"end":{"row":193,"column":23},"action":"insert","lines":["s"],"id":46}],[{"start":{"row":193,"column":23},"end":{"row":193,"column":24},"action":"insert","lines":["e"],"id":47}],[{"start":{"row":193,"column":24},"end":{"row":193,"column":25},"action":"insert","lines":[" "],"id":48}],[{"start":{"row":193,"column":25},"end":{"row":193,"column":26},"action":"insert","lines":["{"],"id":49}],[{"start":{"row":193,"column":26},"end":{"row":195,"column":21},"action":"insert","lines":["","                        ","                    }"],"id":50}],[{"start":{"row":193,"column":26},"end":{"row":195,"column":75},"action":"insert","lines":["","                        next({ status: 404, // Bad Request","                               message: \"unvalid $orderby \" + e.message });"],"id":51}],[{"start":{"row":196,"column":0},"end":{"row":197,"column":0},"action":"remove","lines":["                        ",""],"id":52}],[{"start":{"row":168,"column":41},"end":{"row":168,"column":42},"action":"remove","lines":["4"],"id":53},{"start":{"row":168,"column":41},"end":{"row":168,"column":42},"action":"insert","lines":["0"]}],[{"start":{"row":194,"column":47},"end":{"row":194,"column":58},"action":"remove","lines":["Bad Request"],"id":54}],[{"start":{"row":194,"column":47},"end":{"row":194,"column":48},"action":"insert","lines":["B"],"id":55}],[{"start":{"row":194,"column":47},"end":{"row":194,"column":48},"action":"remove","lines":["B"],"id":56}],[{"start":{"row":194,"column":47},"end":{"row":194,"column":48},"action":"insert","lines":["N"],"id":57}],[{"start":{"row":194,"column":48},"end":{"row":194,"column":49},"action":"insert","lines":["o"],"id":58}],[{"start":{"row":194,"column":49},"end":{"row":194,"column":50},"action":"insert","lines":["t"],"id":59}],[{"start":{"row":194,"column":50},"end":{"row":194,"column":51},"action":"insert","lines":[" "],"id":60}],[{"start":{"row":194,"column":51},"end":{"row":194,"column":52},"action":"insert","lines":["f"],"id":61}],[{"start":{"row":194,"column":52},"end":{"row":194,"column":53},"action":"insert","lines":["o"],"id":62}],[{"start":{"row":194,"column":53},"end":{"row":194,"column":54},"action":"insert","lines":["u"],"id":63}],[{"start":{"row":194,"column":54},"end":{"row":194,"column":55},"action":"insert","lines":["n"],"id":64}],[{"start":{"row":194,"column":55},"end":{"row":194,"column":56},"action":"insert","lines":["d"],"id":65}],[{"start":{"row":195,"column":41},"end":{"row":195,"column":71},"action":"remove","lines":["unvalid $orderby \" + e.message"],"id":66}],[{"start":{"row":195,"column":41},"end":{"row":195,"column":42},"action":"insert","lines":["d"],"id":67}],[{"start":{"row":195,"column":42},"end":{"row":195,"column":43},"action":"insert","lines":["o"],"id":68}],[{"start":{"row":195,"column":43},"end":{"row":195,"column":44},"action":"insert","lines":["c"],"id":69}],[{"start":{"row":195,"column":44},"end":{"row":195,"column":45},"action":"insert","lines":["u"],"id":70}],[{"start":{"row":195,"column":45},"end":{"row":195,"column":46},"action":"insert","lines":["m"],"id":71}],[{"start":{"row":195,"column":46},"end":{"row":195,"column":47},"action":"insert","lines":["e"],"id":72}],[{"start":{"row":195,"column":47},"end":{"row":195,"column":48},"action":"insert","lines":["n"],"id":73}],[{"start":{"row":195,"column":48},"end":{"row":195,"column":49},"action":"insert","lines":["t"],"id":74}],[{"start":{"row":195,"column":49},"end":{"row":195,"column":50},"action":"insert","lines":[" "],"id":75}],[{"start":{"row":195,"column":50},"end":{"row":195,"column":51},"action":"insert","lines":["n"],"id":76}],[{"start":{"row":195,"column":51},"end":{"row":195,"column":52},"action":"insert","lines":["i"],"id":77}],[{"start":{"row":195,"column":52},"end":{"row":195,"column":53},"action":"insert","lines":["t"],"id":78}],[{"start":{"row":195,"column":53},"end":{"row":195,"column":54},"action":"insert","lines":[" "],"id":79}],[{"start":{"row":195,"column":54},"end":{"row":195,"column":55},"action":"insert","lines":["f"],"id":80}],[{"start":{"row":195,"column":55},"end":{"row":195,"column":56},"action":"insert","lines":["o"],"id":81}],[{"start":{"row":195,"column":56},"end":{"row":195,"column":57},"action":"insert","lines":["u"],"id":82}],[{"start":{"row":195,"column":57},"end":{"row":195,"column":58},"action":"insert","lines":["n"],"id":83}],[{"start":{"row":195,"column":58},"end":{"row":195,"column":59},"action":"insert","lines":["d"],"id":84}],[{"start":{"row":195,"column":59},"end":{"row":195,"column":60},"action":"insert","lines":["\""],"id":85}],[{"start":{"row":66,"column":33},"end":{"row":66,"column":34},"action":"remove","lines":["4"],"id":86},{"start":{"row":66,"column":33},"end":{"row":66,"column":34},"action":"insert","lines":["0"]}],[{"start":{"row":134,"column":67},"end":{"row":134,"column":68},"action":"insert","lines":[";"],"id":87}],[{"start":{"row":195,"column":51},"end":{"row":195,"column":52},"action":"remove","lines":["i"],"id":88}],[{"start":{"row":195,"column":51},"end":{"row":195,"column":52},"action":"insert","lines":["o"],"id":89}],[{"start":{"row":55,"column":35},"end":{"row":55,"column":46},"action":"remove","lines":["Bad Request"],"id":90}],[{"start":{"row":55,"column":35},"end":{"row":55,"column":36},"action":"insert","lines":["N"],"id":91}],[{"start":{"row":55,"column":36},"end":{"row":55,"column":37},"action":"insert","lines":["o"],"id":92}],[{"start":{"row":55,"column":37},"end":{"row":55,"column":38},"action":"insert","lines":["t"],"id":93}],[{"start":{"row":55,"column":38},"end":{"row":55,"column":39},"action":"insert","lines":[" "],"id":94}],[{"start":{"row":55,"column":39},"end":{"row":55,"column":40},"action":"insert","lines":["f"],"id":95}],[{"start":{"row":55,"column":40},"end":{"row":55,"column":41},"action":"insert","lines":["o"],"id":96}],[{"start":{"row":55,"column":41},"end":{"row":55,"column":42},"action":"insert","lines":["u"],"id":97}],[{"start":{"row":55,"column":42},"end":{"row":55,"column":43},"action":"insert","lines":["n"],"id":98}],[{"start":{"row":55,"column":43},"end":{"row":55,"column":44},"action":"insert","lines":["d"],"id":99}]]},"ace":{"folds":[],"customSyntax":"javascript","scrolltop":2472.500105857849,"scrollleft":0,"selection":{"start":{"row":185,"column":20},"end":{"row":185,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":205,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1492254187641}